#!/usr/bin/env node

require('source-map-support/register')
const { execCommandSync, assertSanHTMLEqual } = require('../dist/index')
const chalk = require('chalk')
const { readFileSync, readdirSync } = require('fs')
const { resolve } = require('path')
const root = resolve(__dirname, '../test/cases')
const { compile } = require('../dist/fixtures/case')

const caseName = process.argv[2]
if (!caseName) {
    console.error('Usage: debug <CASE_NAME>')
    console.error('Example: debug array-literal')
    console.error()
    console.error('Available case names:')
    console.error(readdirSync(root).map(x => `  - ${x}`).join('\n'))
    process.exit(1)
}

const htmlPath = resolve(root, caseName, 'expected.html')
const expected = readFileSync(htmlPath, 'utf8')
console.log(chalk.cyan(`[EXPECTED] ${caseName}`), expected)

let got1
try {
    compile(caseName)
    got1 = execCommandSync(resolve(__dirname, `./render-by-source.js`), [caseName])
    assertSanHTMLEqual(got1, expected)
    console.log(chalk.green(`[ SOURCE ] ${caseName}`), got1)
} catch (err) {
    console.log(chalk.red(`[ SOURCE ] ${caseName}`), got1)
    console.error(err)
}

let got2
try {
    got2 = execCommandSync(resolve(__dirname, `./render-onthefly.js`), [caseName])
    assertSanHTMLEqual(got2, expected)
    console.log(chalk.green(`[ RENDER ] ${caseName}`), got2)
} catch (err) {
    console.log(chalk.red(`[ RENDER ] ${caseName}`), got2)
    console.error(err)
}
