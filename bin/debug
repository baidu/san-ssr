#!/usr/bin/env node

require('source-map-support/register')
const { assertSanHTMLEqual } = require('../dist/index')
const { execFileSync } = require('child_process')
const chalk = require('chalk')
const { readFileSync } = require('fs')
const assert = require('assert')
const { join } = require('path')
const { jsExists, tsExists, compileComponent, compileJS, compileTS, ls } = require('../dist/fixtures/case')

const caseName = process.argv[2]
const caseItem = ls().find(item => item.caseName === caseName)

if (!caseName || !caseItem) {
    console.error('Usage: debug <CASE_NAME>')
    console.error('Example: debug array-literal')
    console.error()
    console.error('Available case names:')
    console.error(ls().map(x => `  - ${x.caseName}`).join('\n'))
    process.exit(1)
}

const caseRoot = caseItem.caseRoot
const htmlPath = join(caseRoot, caseName, 'expected.html')
const expected = readFileSync(htmlPath, 'utf8')

const cases = {
    jssrc: {
        need: 'js',
        desc: 'JS->源码->渲染',
        fn: () => {
            compileJS(caseName, caseRoot)
            return exec('./render-by-source.js')
        }
    },
    tssrc: {
        need: 'ts',
        desc: 'TS->源码->渲染',
        fn: () => {
            compileTS(caseName, caseRoot)
            return exec('./render-by-source.js')
        }
    },
    comsrc: {
        need: 'js',
        desc: '组件->源码->渲染',
        fn: () => {
            compileComponent(caseName, caseRoot)
            return exec('./render-by-source.js')
        }
    },
    comrdr: {
        need: 'js',
        desc: '组件->Renderer->渲染',
        fn: () => exec('./render-onthefly.js')
    }
}

let enabled = Object.keys(cases).filter(k => {
    if (process.argv.includes('-' + k)) {
        assert(depsReady(k))
        return true
    }
})
if (!enabled.length) enabled = Object.keys(cases)
enabled = enabled.filter(depsReady)
let exitCode = 0

console.log(chalk.cyan('CASE'), caseName)
console.log('----------------------------------------')
console.log(chalk.cyan('EXPECTED'))
console.log(chalk.green(expected))
for (const key of enabled) {
    const { desc, fn } = cases[key]
    let got = ''
    try {
        got = fn()
    } catch (err) {
        console.error(err.stack)
        continue
    }
    try {
        assertSanHTMLEqual(got, expected)
        console.log(chalk.cyan(desc) + ' ' + key)
        console.log(chalk.green(got))
    } catch (err) {
        console.log(chalk.red(desc) + ' ' + key)
        console.log(chalk.red(got))
        exitCode = 1
    }
}
process.exit(exitCode)

function depsReady (key) {
    return cases[key].need === 'js' ? jsExists(caseName, caseRoot) : tsExists(caseName, caseRoot)
}

function exec (bin) {
    return execFileSync(join(__dirname, bin), [caseName], { encoding: 'utf8' }).toString()
}
