#!/usr/bin/env node

require('source-map-support/register')
const { assertSanHTMLEqual } = require('../dist/index')
const { execFileSync } = require('child_process')
const chalk = require('chalk')
const { readFileSync, readdirSync, writeFileSync } = require('fs')
const { join } = require('path')
const { caseRoot, tsExists, compile, compileTS } = require('../dist/fixtures/case')

const caseName = process.argv[2]
if (!caseName) {
    console.error('Usage: debug <CASE_NAME>')
    console.error('Example: debug array-literal')
    console.error()
    console.error('Available case names:')
    console.error(readdirSync(caseRoot).map(x => `  - ${x}`).join('\n'))
    process.exit(1)
}

const htmlPath = join(caseRoot, caseName, 'expected.html')
const expected = readFileSync(htmlPath, 'utf8')
console.log(chalk.cyan(`[EXPECT] ${caseName}`), expected)

if (!caseName.match(/-nsrc$/)) {
    debugCompileToSource()
    if (tsExists(caseName)) debugCompileToTSSource()
}
debugCompileToRenderer()

function debugCompileToSource () {
    let got
    try {
        const targetCode = compile(caseName)
        const fileName = join(caseRoot, caseName, 'ssr.js')
        writeFileSync(fileName, targetCode)

        got = execFileSync(join(__dirname, `./render-by-source.js`), [caseName], { encoding: 'utf8' }).toString()
        assertSanHTMLEqual(got, expected)
        console.log(chalk.green(`[SOURCE] ${caseName}`), got)
    } catch (err) {
        console.log(chalk.red(`[SOURCE] ${caseName}`), got)
        console.error(err)
    }
}

function debugCompileToTSSource () {
    let got
    try {
        const targetCode = compileTS(caseName)
        const fileName = join(caseRoot, caseName, 'ssr.js')
        writeFileSync(fileName, targetCode)

        got = execFileSync(join(__dirname, `./render-by-source.js`), [caseName], { encoding: 'utf8' }).toString()
        assertSanHTMLEqual(got, expected)
        console.log(chalk.green(`[SRC TS] ${caseName}`), got)
    } catch (err) {
        console.log(chalk.red(`[SRC TS] ${caseName}`), got)
        console.error(err)
    }
}

function debugCompileToRenderer () {
    let got
    try {
        got = execFileSync(join(__dirname, `./render-onthefly.js`), [caseName], { encoding: 'utf8' }).toString()
        assertSanHTMLEqual(got, expected)
        console.log(chalk.green(`[RENDER] ${caseName}`), got)
    } catch (err) {
        console.log(chalk.red(`[RENDER] ${caseName}`), got)
        console.error(err)
    }
}
