!function(n){function s(s){for(var t,e,c=s[0],l=s[1],r=s[2],u=0,k=[];u<c.length;u++)e=c[u],Object.prototype.hasOwnProperty.call(p,e)&&p[e]&&k.push(p[e][0]),p[e]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);for(i&&i(s);k.length;)k.shift()();return o.push.apply(o,r||[]),a()}function a(){for(var n,s=0;s<o.length;s++){for(var a=o[s],t=!0,c=1;c<a.length;c++){var l=a[c];0!==p[l]&&(t=!1)}t&&(o.splice(s--,1),n=e(e.s=a[0]))}return n}var t={},p={9:0,23:0},o=[];function e(s){if(t[s])return t[s].exports;var a=t[s]={i:s,l:!1,exports:{}};return n[s].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.e=function(){return Promise.resolve()},e.m=n,e.c=t,e.d=function(n,s,a){e.o(n,s)||Object.defineProperty(n,s,{enumerable:!0,get:a})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,s){if(1&s&&(n=e(n)),8&s)return n;if(4&s&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&s&&"string"!=typeof n)for(var t in n)e.d(a,t,function(s){return n[s]}.bind(null,t));return a},e.n=function(n){var s=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(s,"a",s),s},e.o=function(n,s){return Object.prototype.hasOwnProperty.call(n,s)},e.p="/san-ssr/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=s,c=c.slice();for(var r=0;r<c.length;r++)s(c[r]);var i=l;o.push([61,0]),a()}({22:function(n,s,a){"use strict";a.r(s),function(n){a.d(s,"default",(function(){return c}));var t,p,o,e=a(0);class c extends e.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"San-SSR 输入的三种类型",hash:"san-ssr-%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B"},{level:2,title:"Class 作为输入存在的问题",hash:"class-%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"},{level:2,title:"快速上手",hash:"%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B",children:[{level:3,title:"markExternalComponent",hash:"markexternalcomponent"},{level:3,title:"组件 id",hash:"%E7%BB%84%E4%BB%B6-id"}]},{level:2,title:"实现原理",hash:"%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"},{level:2,title:"注意事项",hash:"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9"}]})}}o={},(p="components")in(t=c)?Object.defineProperty(t,p,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[p]=o}.call(this,a(2))},48:function(n,s){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E4%BD%BF%E7%94%A8-markexternalcomponent-%E7%89%B9%E6%80%A7%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%AF%91">使用-markExternalComponent-特性进行编译</h1> <h2 id="san-ssr-%E8%BE%93%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B">San-SSR 输入的三种类型</h2> <p>目前 San-SSR 在进行编译时，输入的类型有三种，分别为：</p> <ol> <li>Class</li> </ol> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>compileToSource<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san-ssr\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path/to/mycomponent\'</span><span class="token punctuation">)</span>\n<span class="token function">compileToSource</span><span class="token punctuation">(</span>MyCompoent<span class="token punctuation">)</span></code></pre> <ol start="2"> <li>JavaScript string</li> </ol> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>compileToSource<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san-ssr\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyComponentStr <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'path/to/mycomponent.js\'</span><span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n<span class="token function">compileToSource</span><span class="token punctuation">(</span>MyCompoentStr<span class="token punctuation">)</span></code></pre> <ol start="3"> <li>TypeScript string</li> </ol> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>compileToSource<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san-ssr\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyComponentStr <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'path/to/mycomponent.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n<span class="token function">compileToSource</span><span class="token punctuation">(</span>MyCompoentStr<span class="token punctuation">)</span></code></pre> <p>由于输入 JavaScript 或 TypeScript 源码的形式，需要对输入字符串进行静态分析，因此不适合组件写法过于灵活过的情况。而以 Class 形式作为输入则可以解决上述问题。</p> <h2 id="class-%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98">Class 作为输入存在的问题</h2> <p>当使用 Class 作为输入时，我们需要在编译阶段直接 require 该组件，因此所有依赖（子组件、工具库等）此时都需要是可被引用到的。</p> <p>由于我们的组件可能分布于多个代码库，因此大多数情况下只能在生产环境中进行组件的编译工作。markExternalComponet 的引入就是为了解决该问题。</p> <p>基于 San-SSR 最新提供的 markExternalComponet 特性，我们可以在本地进行组件的编译工作。</p> <h2 id="%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">快速上手</h2> <h3 id="markexternalcomponent">markExternalComponent</h3> <p>新版本的 San-SSR 中，提供了一个 <code>markExternalComponent</code> 函数，使用该函数，可以提前标记外部组件。</p> <p>假设我们有这样一个组件：</p> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> san <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./childA.san\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'x-l\'</span><span class="token operator">:</span> Child\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;x-l/>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyComponent</code></pre> <p>其中 childA 组件不在当前代码库中，它可能是一个单独维护的组件库等。此时我们可以在引用该组件类进行编译之前，对 <code>childA</code> 进行标记：</p> <pre class="language-javascript"><code class="language-javascript"><span class="token function">markExternalComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">isExternalComponent</span> <span class="token punctuation">(</span><span class="token parameter">specifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>specifier <span class="token operator">===</span> <span class="token string">\'./childA.san\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span>compileToSource<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san-ssr\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path/to/mycomponent\'</span><span class="token punctuation">)</span>\n<span class="token function">compileToSource</span><span class="token punctuation">(</span>MyCompoent<span class="token punctuation">)</span></code></pre> <p>进行标记后，当我们 require <code>MyComponent</code> 时，将不会去加载 <code>childA</code>，我们可以在生产环境中单独提供 <code>childA</code>。</p> <h3 id="%E7%BB%84%E4%BB%B6-id">组件 id</h3> <p>当我们从文件中引用一个组件时，需要两个信息来定位一个组件：</p> <ol> <li><code>specifier</code>：表示组件所在文件的路径，运行时会使用 <code>require(specifier)</code> 来加载该文件。因此它可以是一个相对路径、绝对路径或一个包名称。</li> <li><code>id</code>：表示某个文件中的组件 id。</li> </ol> <p>例如：</p> <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// specifier 为 \'./childA.san\'，id 为 ‘default’</span>\n<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./childA.san\'</span><span class="token punctuation">)</span></code></pre> <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// specifier 为 \'some-ui-module\'，id 为 \'compA\' 和 \'compB\'</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> compA<span class="token punctuation">,</span> compB <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'some-ui-module\'</span><span class="token punctuation">)</span></code></pre> <p>当我们使用 <code>markExternalComponent</code> 时，<strong>需要手动对子组件的 id 进行标记</strong>，否则 san-ssr 会默认以递增数字的形式对 id 进行命名。</p> <p>例如：</p> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> san <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span> <span class="token comment">// id 标记</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> OtherComponent</code></pre> <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> san <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'san\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> ComponentA <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'ComponentA\'</span><span class="token punctuation">,</span> <span class="token comment">// id 标记</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ComponentB <span class="token operator">=</span> san<span class="token punctuation">.</span><span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'ComponentB\'</span><span class="token punctuation">,</span> <span class="token comment">// id 标记</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'&lt;div>&lt;/div>\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n    ComponentA<span class="token punctuation">,</span>\n    ComponentB\n<span class="token punctuation">}</span></code></pre> <h2 id="%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">实现原理</h2> <p>调用 <code>markExternalComponent</code> 时，San-SSR 会对 Node.js 中的 require 进行 hook，拦截子组件的加载。判断为子组件的 require 调用，San-SSR 会返回一个组件引用信息（specifier 和 id）。编译期间遇到组件引用信息，则会编译为外部组件的调用。</p> <h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</h2> <p>require 的 hook 使用的是类似 <a href="https://www.npmjs.com/package/require-in-the-middle" target="_blank">require-in-the-middle</a> 的方式，与 <a href="https://www.npmjs.com/package/jest" target="_blank">jest</a> 不兼容。</p> </div></div> '},61:function(n,s,a){var t=a(1),p=a(48),o=a(22).default;n.exports=a(22),n.exports.default=t(o,p,[])}});